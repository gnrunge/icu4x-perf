initSidebarItems({"enum":[["ZeroVecError","A generic error type to be used for decoding slices of ULE types"]],"fn":[["encode_varule_to_box","Given an [`EncodeAsVarULE`] type `S`, encode it into a `Box<T>`"]],"mod":[["custom","This module contains documentation for defining custom VarULE types, especially those using complex custom dynamically sized types."]],"struct":[["CharULE","A u8 array of little-endian data corresponding to a Unicode code point."],["PairULE","We do not have guarantees for the layouts of tuples, so we must define a custom ULE type for pairs. This could potentially be generalized for larger tuples if necessary"],["RawBytesULE","A u8 array of little-endian data with infallible conversions to and from &[u8]."]],"trait":[["AsULE","A trait for any type that has a 1:1 mapping with an unaligned little-endian (ULE) type."],["EncodeAsVarULE","Allows types to be encoded as VarULEs. This is highly useful for implementing VarULE on custom DSTs where the type cannot be obtained as a reference to some other type."],["EqULE","An [`EqULE`] type is one whose byte sequence equals the byte sequence of its ULE type on little-endian platforms. This enables certain performance optimizations, such as `ZeroVec::try_from_slice`."],["SliceAsULE","A trait for a type where aligned slices can be cast to unaligned slices."],["ULE","Fixed-width, byte-aligned data that can be cast to and from a little-endian byte slice."],["VarULE","Variable-width, byte-aligned data that can be cast to and from a little-endian byte slice."]]});